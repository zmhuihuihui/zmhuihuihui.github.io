<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring之DI</title>
      <link href="/2019/10/18/spring-zhi-di/"/>
      <url>/2019/10/18/spring-zhi-di/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring中的DI"><a href="#Spring中的DI" class="headerlink" title="Spring中的DI"></a>Spring中的DI</h2><p>在<a href="https://zmhuihuihui.github.io/2019/10/18/spring-zhi-ioc/" target="_blank" rel="noopener">上一小节</a>中，我们阐述了Spring中的核心思想IOC，那么在Spring中是如何实现IOC思想的呢？<br>在Spring中通过DI（依赖注入）的方式来实现IOC思想的。那何为依赖注入呢？即指Spring容器通过Spring Bean对象来创建和维护对象之间的依赖关系，通过DI将对象的依赖关系动态的注入到对象中去，粗略的讲Spring Bean负责创建管理对象，DI负责对象的初始化。</p><h3 id="Bean创建对象"><a href="#Bean创建对象" class="headerlink" title="Bean创建对象"></a>Bean创建对象</h3><p>Spring Bean是在Spring框架运行时所管理的对象，是Spring应用程序的基本构件块。Spring框架中BeanFactory负责创建并维护Bean实例，将系统配置和依赖关系从代码中独立了出来。在实际操作我们应该指定将哪些类用作Bean交由Spring管理，并不是所有类都要交由Spring管理。其对类的具体管理包括：</p><ul><li>创建一个对象</li><li>通过依赖注入提供依赖项</li><li>拦截方法调用以提供额外的框架功能</li><li>销毁一个对象</li></ul><p>那么接下来就来看看Spring是如何实现IOC和DI的。首先，看一下整个项目的整体框架。<br><img src="/2019/10/18/spring-zhi-di/1.png" alt="项目框架"></p><ul><li>entity目录，存放实体类，分别有Car抽象类和Person抽象类。</li><li>CarImpl目录和PersonImpl目录，分别存放Car的实现类和Person的实现类。</li><li>main目录，存放主函数。</li><li>resoucrces目录，存放资源配置，目前只存放spring的配置文件。</li><li>pom.xml，maven的配置文件。</li></ul><p>然后，我们需要导入Spring框架所需要的包，一共有以下几种。<br><img src="/2019/10/18/spring-zhi-di/2.png" alt="依赖包结构"><br>其中spring-context包需要依赖右边四个包，所以我们只需要在maven中添加spring-context依赖就会自动导入Spring所有包。其pom.xml配置如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="xml注入"><a href="#xml注入" class="headerlink" title="xml注入"></a>xml注入</h3><p>配置完Spring框架后，就要实现注入。首先先实现第一种注入方式xml注入。之前我们说过，要将对象的控制权交由Spring容器处理，如果使用xml实现，首先得创建一个spring xml的配置文件，其结构如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>这是系统自动写好的开头，我们需要在<beans>标签中添加我们的对象。回到上一小节的例子，张三想要开车回家，那么我们首先要先获取车这个对象，那么我们先把所有车交由Spring管理。这里用到<bean>标签：</bean></beans></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carA<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entity.CarImpl.CarA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carB<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entity.CarImpl.CarB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><bean>标签这里用到两个属性，第一个id即为实例的名字，第二个class即为你要交由Spring管理的类。这样我们就将A车和B车对象都交由Spring容器管理。接着我们需要一个ZhangSan对象，使用相同<bean>标签:</bean></bean></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ZhangSan<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entity.PersonImpl.ZhangSan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carA<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>这里有所不同，id和class和上述一样，但在<bean>标签中还有<constructor-arg>子标签。我我们想象一下，如果我们亲手new一个对象，就会使用到构造器，那么这里也同样的道理，在将对象创建时，有时可能会使用有参数的构造器，那么就会用到<constructor-arg>标签实现构造器注入，这个标签必须与类中构造器相匹配，即相当是调用这个构造器：</constructor-arg></constructor-arg></bean></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSan</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    ……    <span class="token function">ZhangSan</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ……<span class="token punctuation">}</span></code></pre><p>因为这里的car为引用类型，所以使用ref属性，其值carA指的是上面id=carA的对象。如果想要初始化的值为int等普通类型，则使用属性value，直接赋值。有时后可能没有在构造器中实现注入，还可以使用set方法注入：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ZhangSan<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entity.PersonImpl.ZhangSan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carA<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>这里使用了<property>标签，必须要求类中有对应的set方法，效果和构造器注入相同，即相当于使用了这个方法：</property></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSan</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    ……    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCar</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ……<span class="token punctuation">}</span></code></pre><p>此时我们将carA、carB、ZhangSan都交由Spring管理，不用我们手动创建对象了，那么我们该如何拿到这些对象呢？在主函数中，分为两步：</p><ul><li>获取到Spring上下文</li><li>从Spring上下文的容器中获取对象。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1、获取spring上下文</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、获取ZhangSan对象</span>        Person ZhangSan <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"ZhangSan"</span><span class="token punctuation">,</span> ZhangSan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZhangSan<span class="token punctuation">.</span><span class="token function">goHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 ClassPathXmlApplicationContext类从类名就可以看出，它是通过xml配置文件中加载Spring上下文的，所以只需把xml文件名传入就可以获取了上下文。得到Spring上下文，意味着得到了Spring的“心脏”，通过上下文的getBean()方法可以获取对象，其中第一个参数为之前配置的对象的id，第二个参数为实体类的class对象。接着就可以执行对应的方法得到结果：<br><img src="/2019/10/18/spring-zhi-di/3.png" alt="运行结果"><br>这就完成了xml实现注入，然而大量的配置文件总是麻烦的，在大多数情况下我们通常会使用第二种简洁的方法，用注解实现注入。</p><h3 id="注解注入"><a href="#注解注入" class="headerlink" title="注解注入"></a>注解注入</h3><p>使用注解注入就不用大量配置xml文件了。直接定位到想要交由Spring管理的类，以CarA为例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"carA"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarA</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is starting!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is turning left!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is turning right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is stopping!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>只需在CarA类名上面添加一个注解@ Component就实现了相当于xml中的<bean>标签，其中的value即使实例的名字，相当于xml中的id。对比复杂的xml配置，注解的方式清晰明了。同样对于ZhangSan类：</bean></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"ZhangSan"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSan</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"carA"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Car car<span class="token punctuation">;</span>    <span class="token function">ZhangSan</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ……<span class="token punctuation">}</span></code></pre><p>通过@Component注解把ZhangSan类交由Spring管理，然后直接在Car的属性上添加注解实现初始化。@Autowired注解可以实现自动注入，它会从Spring容器中寻找与此类型相匹配的对象注入进去，在Spring容器中我们有CarA和CarB都可以注入，此时存在不唯一性，于是使用@Qualifier注解实现指定注入，这里我们要求张三开A车回家，就指定value = CarA进行注入。</p><p>此时把所有对象都交由Spring容器管理，最后还需修改一点点xml文件。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>标签<a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>的作用是开启注解扫描，base-package为扫描范围。我们对entity包下全部扫描，就可以实现自动扫描注解然后将对象放入Spring容器中。需要注意的一点是此标签在context包中，所以<beans>标签中需要添加context相关的命名空间。xml配置好了后，到主函数，主函数无需任何改动直接运行，就可以得到与xml注入相同的效果。</beans></p><p>以上就是Spring中的IOC和DI的基本使用方法。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Spring -DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之IOC思想</title>
      <link href="/2019/10/18/spring-zhi-ioc/"/>
      <url>/2019/10/18/spring-zhi-ioc/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring中的IOC"><a href="#Spring中的IOC" class="headerlink" title="Spring中的IOC"></a>Spring中的IOC</h2><p>IOC（Inversion of Control），其名称是控制反转，是一种重要的设计思想,实现了程序设计的松耦合。其分为两个部分控制与反转，那么这里就会有两个重要的问题：控制什么？反转什么？</p><ul><li>控制：指控制对象的生命周期。</li><li>反转：指将对象的控制权交由Spring容器处理。</li></ul><p>现在理解起来可能十分困难，等文章最后我们再来详细聊聊控制反转。现在通过一个例子来引出IOC。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>假设现在有这么一个场景，有一个人每天下班都需要开车回家。那么怎么用编程来描述这个事件呢？首先要有定义一辆车。这辆车名叫carA，有四个方法分别为启动、左转、右转、熄火。其结构如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarA</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//启动</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is starting!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//左转</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is turning left!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">turnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//右转</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is turning right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//熄火</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carA is stopping!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后需要定义一个人。这个人叫张三，拥有一辆carA车，并且有一个回家的方法。其结构如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSan</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> CarA carA<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ZhangSan</span><span class="token punctuation">(</span>CarA carA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>carA <span class="token operator">=</span> carA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        carA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carA<span class="token punctuation">.</span><span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carA<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>张三离家很近，只需开车启动、左转、熄火就到了。那么每天张三只需要调用goHome()方法就能回到家了。直到有一天，张三凭借着自己的积蓄，买了第二辆车carB。那么同样我们需要定义这么一辆车carB，其结构和carA完全相同，并且需要把ZhangSan类中的所有和车有关的都换成carB。</p><p>这时我们就发现问题了，如果某天张三拥有十辆车了，一天一辆轮着开，那么我们每天都需要频繁的修改ZhangSan类拥有的车及goHome方法，这是十分不合理的。</p><p>这时我们需要明白，其实ZhangSan只需要回家的操作，他本身并不关注开的是什么车。换句话说，他家的保镖只需要在他公司下面停一辆车供张三下班后开回家，张三本身不关心开什么车回家。那么我们就可以进行重构，我们先抽象出这个车,其结构如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">turnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着，ZhangSan类只需要把车改为抽象车，这样就可以实现每天开不同的车（多态）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSan</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Car car<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ZhangSan</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        car<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时我们可以在主函数中这样测试。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//今天开A车</span>        ZhangSan zhangSan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhangSan</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangSan<span class="token punctuation">.</span><span class="token function">goHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就可以解决上述的问题，张三今天想开什么车，就new一个车，然后回家，省去了在ZhangSan类中进行修改。但还有问题，张三每天想开不同的车就得new不同的车，他嫌太麻烦。他想可不可以每天公司下面停着自己的所有车，下班想开哪一辆开哪一辆。<br>这时引出了本文的主题IOC。我们可以把对象事先存放在Spring容器中（先把所有车停到公司下面），然后当我们需要某个对象时直接从Spring容器中取（下班后取一辆车）。这样就不用每次频繁的修改源代码new不同的对象了。此时再回过头来谈谈什么是IOC（控制反转）。</p><h3 id="再谈IOC"><a href="#再谈IOC" class="headerlink" title="再谈IOC"></a>再谈IOC</h3><p>控制反转即将对象的控制权交由Spring容器处理。在传统的开发模式下，我们往往会自己new对象，此时对象的控制权在程序员手中，什么时候需要用直接new一个就行。而有了Spring IOC，程序员不需要自己手动new对象，Spring会把所有对象创建好放到了一个容器中，由Spring Bean进行统一管理，程序员想用直接拿就好了。<br>由此可以看出Spring的核心思想控制反转，对象的控制权由程序员转变到了Spring，程序员再也不用关心创建对象的过程，只需要关注对象的使用就行。同样再上述例子中，也可以抽象出Person类，实现不同的人开不同的车回家。</p><p>那么Spring框架是如何实现IOC思想的呢，将在下一小节详细描述。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spirng </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/17/hello-world/"/>
      <url>/2019/10/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
